{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why Event Issuer exists","text":"<p>The goal of an Event Issuer is to provide an infrastructure to abstract event delivery via a secured RESTful API to external users and systems such as SaaS. This allows external users to maintain service boundaries, and not directly depend on any specific message broker technology. The event issuer will have the possibility for both consuming events from Bane NOR and produce new events.</p> <p></p>"},{"location":"#consumer","title":"Consumer","text":"<p>The consumer side of event issuer is based on webhooks. Webhooks are the foundation of modern API development where it is an universal concept that is easily understood by many systems as a way to react to changes.</p> <p>One of the main issues tough is contracts, as we should handle many different types of events, it is important to use well defined schemas/contracts that can be used for validation. For this the Event Issuer can be used to get registered schemas for the different events that can be subscribed to.</p>"},{"location":"#what-are-webhooks","title":"What are Webhooks?","text":"<p>Webhooks are how one system notifies another system of a state change.</p> <p>In architectural terms, a webhook is a programming language agnostic approach for sending messages between distributed systems. The power of webhooks comes first from being independent of any specific tech stack and second from the notification-based approach. Regardless of your architecture, your systems can receive or broadcast webhooks without being dependent on a specific vendor or even on the same network. Further, downstream systems receiving webhooks don't need to poll a central system for updates or status changes, they can simply listen for an event and process the results.</p> <p>In practical terms, a webhook is simply an HTTP request - usually a POST - with a JSON payload or parameters broadcast from the central system. Much of the modern web is built on this distributed communication pattern.</p>"},{"location":"#producing","title":"Producing","text":"<p>To produce events to Bane NOR the Event Issuer will have endpoints that can be used to send new events. These events must have predefined data schemas that will be registered into the schema registry. This gives the Event Issuer the ability to validate incoming events that they are in fact following the contract and do no cause any poison pill to our systems.</p> <p>In Confluent a Poison Pill is defined as:</p> <p>\u201ca record that has been produced to a Kafka topic and always fails when consumed, no matter how many times it is attempted.\u201d \u2014 Confluent.io</p>"},{"location":"#cloudevents","title":"Cloudevents","text":"<p>A specification for describing event data in a common way - cloudevents.io</p> <p>Cloudevents is part of the Cloud Native Computing Foundation list of projects. This is an specification that tries to standardize the way we describe events and its metadata/headers.</p> <p>Event Issuer follows the cloudevents specification and will and uses the HTTP protocol bindings for all outgoing events. For producers this will be based on the JSON Event Format.</p> <p>For more technical specifications see the cloudevents user guide section</p>"},{"location":"#security","title":"Security","text":"<p>Event Issuer will go into some different phases around the security. Where the initial alpha versions will only work for invited partners. Tough we will work towards for consumer side to be self service for the most part, where producers needs to be controlled before they are allowed to send events.</p> <p>It is also important to support different authentication and authorizations not only to Bane NOR but to the external webhooks.</p> <p>Some ideas of features that will be added around this are:</p> <ul> <li>OAuth2, JWTs, and JWKs for authentication and authorization towards the webhook endpoint</li> <li>API Keys that can be configured by the end users if needed to authenticate to their webhook endpoints</li> <li>One Time Verification, seen at other systems like Twitter and Microsoft OneDrive. Use during setup to confirm that the consumer controls the code endpoint</li> <li>Event signing so that consumer can verify that the event has not been tampered with after being sendt from event issuer and gives event integrity</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"apis/v1alpha/","title":"v1alpha","text":""},{"location":"user-guides/cloudevents/","title":"Cloudevents","text":"<p>The cloudevents specification is used by Event Issuer both for subscribed events and produced events. The difference is how Event Issuer is using the Cloud Events for events being subscribed to and when producing.</p>"},{"location":"user-guides/cloudevents/#subscription","title":"Subscription","text":"<p>Subscribed events are receiving the cloud events by using the HTTP Protocol Binding. This means that the CloudEvents are part of the HTTP headers.</p>"},{"location":"user-guides/cloudevents/#producers","title":"Producers","text":"<p>Producers needs to transmit the CloudEvent metadata by using the JSON Event Format. The produce endpoints expects an content type of <code>application/cloudevents+json</code> as specified in section <code>3. Envelope</code> of the specification.</p>"},{"location":"user-guides/producing/","title":"Producing","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/producing/#producing","title":"Producing","text":"<p>Event Issuer can be used to produce new events to Bane NOR. This is not openly available and an aggreement with Bane NOR is needed to be able to produce data. The correct access rights for producing will given on an aggreement basis.</p> <p>Bane NOR uses the Cloud Event specification for event that needs to be produced and support both single event producers and the possibility to send an batch of events.</p> <p>Cloud Events has created SDKs for different languages that can be found on the main page under the <code>SDKs</code>in the menu.</p> <p>The Event Issuer has two API endpoints for this:</p> <ul> <li>{tenantId}/produce</li> <li>{tenantId}/produce/batch</li> </ul>"},{"location":"user-guides/producing/#cloud-events","title":"Cloud Events","text":"<p>Cloud Events supports different ways of sending mainly, structured, binary and batch. At the moment only JSON is supported to be used, but other content types can be added later.</p>"},{"location":"user-guides/producing/#binary","title":"Binary","text":"<p>In binary mode the <code>cloud event</code> headers are sent as part of the HTTP header values by using the <code>ce-</code> prefix. For more information about this see the binary mode documented in the specification.</p> <pre><code>POST event-issuer/v1/{tenantId}/produce HTTP/1.1\nHost: api.banenor.com\nce-specversion: 1.0\nce-type: cloud.domain.sub-domain.event.v1\nce-time: 2018-04-05T03:56:24Z\nce-id: 1234-1234-1234\nce-source: /mycontext/subcontext\n    .... further attributes ...\nContent-Type: application/json; charset=utf-8\nContent-Length: nnnn\n\n{\n    ... application data ...\n}\n</code></pre>"},{"location":"user-guides/producing/#structured","title":"Structured","text":"<p>With structured modes the <code>cloud event</code> headers are sent as part of the HTTP payload/body data. For more information about this see the structured mode documented in the specification.</p> <pre><code>POST event-issuer/v1/{tenantId}/produce HTTP/1.1\nHost: api.banenor.com\nContent-Type: application/cloudevents+json; charset=utf-8\nContent-Length: nnnn\n\n{\n    \"specversion\" : \"1.0\",\n    \"type\" : \"cloud.domain.sub-domain.event.v1\",\n\n    ... further attributes omitted ...\n\n    \"data\" : {\n        ... application data ...\n    }\n}\n</code></pre>"},{"location":"user-guides/producing/#batch","title":"Batch","text":"<p>With batch mode and list of cloud events can be sendt in the same HTTP request that needs to be produced. This a list of event in an structured mode.</p> <pre><code>POST event-issuer/v1/{tenantId}/produce/batch HTTP/1.1\nHost: api.banenor.com\nContent-Type: application/cloudevents-batch+json; charset=utf-8\nContent-Length: nnnn\n\n[\n    {\n        \"specversion\" : \"1.0\",\n        \"type\" : \"cloud.domain.sub-domain.event.v1\",\n\n        ... further attributes omitted ...\n\n        \"data\" : {\n            ... application data ...\n        }\n    },\n    {\n        \"specversion\" : \"1.0\",\n        \"type\" : \"cloud.domain.sub-domain.event.v2\",\n\n        ... further attributes omitted ...\n\n        \"data\" : {\n            ... application data ...\n        }\n    }\n]\n</code></pre>"},{"location":"user-guides/subscriptions/","title":"Subscriptions","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/subscriptions/#subscriptions","title":"Subscriptions","text":"<p>Subscriptions is the main mechanism for getting realtime events from the Bane NOR event backbone. The subscription is an reference to an application that wants events to be sendt to an webhook endpoint. The subscriber can configure the authentication towards the endpoint in addition to an API key if that is needed.</p>"},{"location":"user-guides/subscriptions/#webhook-endpoint","title":"Webhook endpoint","text":"<p>The endpoint can receive the event payload with additional metadata by using the CloudEvents HTTP binding.</p> <p>Cloud events are sent by using the HTTP Protocol Binding. This means that the CloudEvents are part of the HTTP headers.</p> <p>Info</p> <p>Bane NOT is workign on stanarising on the cloud event specification wich means that some event types might be missing the cloud event headers.</p>"},{"location":"user-guides/subscriptions/#authenticating-subscriptions","title":"Authenticating subscriptions","text":"<p>Some users require authentication and authorization to be able to communicate with their APIs. For this purpose different types can be configured for the subscription. The following are supported:</p> <ul> <li>No authentication</li> <li>API Key</li> <li>Basicauth</li> <li>OAuth 2.0</li> </ul> <p>The idea is that the end users or services can configure the needed information to authenticate towards the webhook endpoint and update the configuration as needed.</p> <p>The API Key can be configured with any of the other options in case it is needed as part of your API management setup.</p>"},{"location":"user-guides/subscriptions/#api-key","title":"API Key","text":"<p>API Key is something that usualy are created when subscribint to certain API or products that can be used both as an token for an API Management system to check if the request should be handeled and in monitoring siuations to check the number of requests are used with example rate limiting.</p> <p>Event Issuer supports the use of an API Key configuration wich can be configured with one of the other autentication mechanisms if both are needed.</p>"},{"location":"user-guides/subscriptions/#basic-auth","title":"Basic Auth","text":"<p>Basic authentication with an username and password is supported as an simple mechanism for getting access to an webhook.</p>"},{"location":"user-guides/subscriptions/#example","title":"Example","text":"<pre><code>{\n    \"applicationId\": \"application1\",\n    \"eventName\": \"cloud.operational.train-arrived-at-station.v1\",\n    \"url\": \"https://test.no/test\",\n    \"apiKey\": {\n        \"header\": \"Ocp-Apim-Subscription-Key\",\n        \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n    },\n    \"authentication\": {\n        \"type\": \"basic\",\n        \"username\": \"systemx\",\n        \"password\": \"use-a-secure-password\"\n    }\n}\n</code></pre>"},{"location":"user-guides/subscriptions/#identity-providers","title":"Identity Providers","text":"<p>An identity provider (IdP) is a system that creates, stores, and manages digital identities. The IdP can either directly authenticate the user or can provide authentication services to third-party service providers (apps, websites, or other digital services).</p> <p>The following IdPs are supported by to fetch OAuth2.0 tokens:</p> <ul> <li>Maskinporten</li> <li>Entra ID</li> </ul> <p>The following diagram shows the system-context for the communication with and IdP.</p> <p></p>"},{"location":"user-guides/subscriptions/#maskinporten","title":"Maskinporten","text":"<p>Maskinporten is a Norwegian solution to add authorisations between companies that needs to be able to share data between systems or in other words machine-to-machine.</p>"},{"location":"user-guides/subscriptions/#example_1","title":"Example","text":"<pre><code>{\n    \"applicationId\": \"application1\",\n    \"eventName\": \"cloud.operational.train-arrived-at-station.v1\",\n    \"url\": \"https://test.no/test\",\n    \"apiKey\": {\n        \"header\": \"Ocp-Apim-Subscription-Key\",\n        \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n    },\n    \"authentication\": {\n        \"type\": \"maskinporten\",\n        \"scopes\": [ \"company:apix:write\" ]\n}\n</code></pre> <p>Info</p> <p>To be able to use Maskinporten the integration team at Bane NOR needs to be contacted to link the Maskinporten integration to be abele to use the correct scope from the API vendor.</p> <p>For companies that uses an token exchange where the maskinporten token needs to be exchagned with an company specific token, contact the integration team with the speicif needs. This will then be added to the backlog and implemented as an tenant specific solution for those needs.</p>"},{"location":"user-guides/subscriptions/#entra-id","title":"Entra ID","text":"<p>Entra ID is the standard OAuth authentication mechanism used in Azure. To be able to use this with Event Issuer subscriptions, we will need to do a server-to-server interaction that runs in the background, without immediate interaction with a user. This is done through an OAuth client-credential flow that grants permissions directly to the application itself by an administrator.</p> <p>Entra Id also uses the JWT Grant mechanisms to obtain the <code>access_token</code> for requests. These are the configuration options for Entra. <pre><code>// With client secret\n{\n    \"AuthUrl\": \"https://login.microsoftonline.com/\",\n    \"TenantId\": \"[Enter here the tenantID or domain name for your Azure AD tenant]\",\n    \"ClientId\": \"[Enter here the ClientId for your application]\",\n    \"ClientSecret\": \"string\",\n    \"scope\": \"string\",\n    \"grant_type\": \"client_credentials\"\n}\n</code></pre></p> <pre><code>// With certificate or federated credential\n{\n    \"AuthUrl\": \"https://login.microsoftonline.com/\",\n    \"TenantId\": \"[Enter here the tenantID or domain name for your Azure AD tenant]\",\n    \"ClientId\": \"[Enter here the ClientId for your application]\",\n    \"client_assertion_type\": \"The value must be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\",\n    \"client_assertion\": \"JSON web token needed to sign with the certificate\",\n    \"scope\": \"string\",\n    \"grant_type\": \"client_credentials\"\n}\n</code></pre>"},{"location":"user-guides/subscriptions/#example_2","title":"Example","text":"<pre><code>{\n    \"applicationId\": \"application1\",\n    \"eventName\": \"cloud.operational.train-arrived-at-station.v1\",\n    \"url\": \"https://test.no/test\",\n    \"apiKey\": {\n        \"header\": \"Ocp-Apim-Subscription-Key\",\n        \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n    },\n    \"authentication\": {\n        \"type\": \"entraid\",\n        \"url\": \"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token\",\n        \"clientId\": \"d0a3da30-8936-4800-9c23-37c1b86d8a63\",\n        \"clientSecret\": \"7hzQ3bPSNThb7Cgem+a+w2RqLMKr*LqCSALYco-zQyi4ueUnVo\",\n        \"scopes\": [ \"apix:write\" ]\n}\n</code></pre>"},{"location":"user-guides/subscriptions/#client-credentials-flow","title":"Client credentials flow","text":"<p>This diagram describes how authentication works between background services. For Event-Issuer the flow would look like this.</p> <p>This flow assumes that an admin has created an app registration for the subscription and given it the correct permissions to the Web API in questions.</p> <pre><code>sequenceDiagram\n    participant Event Issuer Subscription\n    participant EntraId\n    participant Web API\n\n    Event Issuer Subscription-&gt;&gt;EntraId: Request token\n    EntraId--&gt;&gt;Event Issuer Subscription: Returns token\n    loop Until the consumer has caught up to the offset\n    Event Issuer Subscription-&gt;&gt;Web API: Posts data to API with token in Authorization header\n    end\n    Web API-&gt;&gt;Web API: Validates token\n    alt Success\n    Web API--&gt;&gt;Event Issuer Subscription: 200 ok\n    else Failed\n    Web API --&gt;&gt;Event Issuer Subscription: 401, 403, 404, 501, etc.\n    end</code></pre>"},{"location":"user-guides/subscriptions/#access-control","title":"Access control","text":"<p>Microsoft provides two options to grant access to applications: access control lists and application permissions.</p>"},{"location":"user-guides/subscriptions/#access-control-lists","title":"Access control lists","text":"<p>Access control lists enforce autorization based on a list of applicaiton IDs that it knows and grants a specific level of access to. When the relevant resource receives a token, it decodes it and checks it against the list of authorized clients.</p>"},{"location":"user-guides/subscriptions/#application-permissions","title":"Application permissions","text":"<p>For data owned by organizations, Microsoft recommends using application permissions. To use application roles with your own API, you need to expose the app roles in the API's app registration, then configure the required roles in your client's (the subscription) app registration. The user who creates a subscription will also have to create an app registration in their organization that they provide the neccessary permissions.</p>"},{"location":"user-guides/subscriptions/#create-subscription","title":"Create Subscription","text":"<p>To create an subscription the following command can be used to create an subscription that needs to use an api key and basic authentication.</p> <pre><code>curl -H \"Ocp-Apim-Subscription-Key: ApiKey\" https://&lt;bane-nor-api-endpoint&gt;/event-issuer/v1alpha/{tenantId}/subscriptions -d '{\"applicationId\": \"my-applicaiotn\", \"event\": \"event-name\", \"url\": \"https://my-endpoint.com/events}, \"apiKey\": { \"header\": \"Ocp-Apim-Subscription-Key\", \"key\": \"api-key\" }, \"authentication\": { \"username\": \"user1\", \"password\": \"my-secure-password\" }'\n</code></pre> <p>If only an api key is needed don't set the <code>authentication</code> and and only the <code>apiKey</code> section.</p>"},{"location":"user-guides/tenants/","title":"Tenants","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/tenants/#tenants","title":"Tenants","text":"<p>Event Issuer uses the concept of Tenants to give an multi tenancy architecture around the solutions. This gives Bane NOR better control over the resource usage.</p> <p>Tenants can at the moment only be created by Bane NOR.</p>"},{"location":"user-guides/tracing/","title":"Tracing","text":"<p>Event Issuer is using the Open Telemetry and will deliver an tracing value for every outgoing event.</p> <p>The standardized way to transmit tracing values is by following the W3 standard by using:</p> <ul> <li><code>traceparent</code> describes the position of the incoming request in its trace graph in a portable, fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set <code>traceparent</code> even when it only relies on vendor-specific information in <code>tracestate</code></li> <li><code>tracestate</code> extends <code>traceparent</code> with vendor-specific data represented by a set of name/value pairs. Storing information in <code>tracestate</code> is optional.</li> </ul>"}]}