{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why Event Issuer exists","text":"<p>The goal of an Event Issuer is to provide an infrastructure to abstract event delivery via a secured RESTful API to external users and systems such as SaaS. This allows external users to maintain service boundaries, and not directly depend on any specific message broker technology. The event issuer will have the possibility for both consuming events from Bane NOR and produce new events.</p> <p></p>"},{"location":"#consumer","title":"Consumer","text":"<p>The consumer side of event issuer is based on webhooks. Webhooks are the foundation of modern API development where it is an universal concept that is easily understood by many systems as a way to react to changes.</p> <p>One of the main issues tough is contracts, as we should handle many different types of events, it is important to use well defined schemas/contracts that can be used for validation. For this the Event Issuer can be used to get registered schemas for the different events that can be subscribed to.</p>"},{"location":"#what-are-webhooks","title":"What are Webhooks?","text":"<p>Webhooks are how one system notifies another system of a state change.</p> <p>In architectural terms, a webhook is a programming language agnostic approach for sending messages between distributed systems. The power of webhooks comes first from being independent of any specific tech stack and second from the notification-based approach. Regardless of your architecture, your systems can receive or broadcast webhooks without being dependent on a specific vendor or even on the same network. Further, downstream systems receiving webhooks don't need to poll a central system for updates or status changes, they can simply listen for an event and process the results.</p> <p>In practical terms, a webhook is simply an HTTP request - usually a POST - with a JSON payload or parameters broadcast from the central system. Much of the modern web is built on this distributed communication pattern.</p>"},{"location":"#producing","title":"Producing","text":"<p>To produce events to Bane NOR the Event Issuer will have endpoints that can be used to send new events. These events must have predefined data schemas that will be registered into the schema registry. This gives the Event Issuer the ability to validate incoming events that they are in fact following the contract and do no cause any poison pill to our systems.</p> <p>In Confluent a Poison Pill is defined as:</p> <p>\u201ca record that has been produced to a Kafka topic and always fails when consumed, no matter how many times it is attempted.\u201d \u2014 Confluent.io</p>"},{"location":"#cloudevents","title":"Cloudevents","text":"<p>A specification for describing event data in a common way - cloudevents.io</p> <p>Cloudevents is part of the Cloud Native Computing Foundation list of projects. This is an specification that tries to standardize the way we describe events and its metadata/headers.</p> <p>Event Issuer follows the cloudevents specification and will and uses the HTTP protocol bindings for all outgoing events. For producers this will be based on the JSON Event Format.</p> <p>For more technical specifications see the cloudevents user guide section</p>"},{"location":"#security","title":"Security","text":"<p>Event Issuer will go into some different phases around the security. Where the initial alpha versions will only work for invited partners. Tough we will work towards for consumer side to be self service for the most part, where producers needs to be controlled before they are allowed to send events.</p> <p>It is also important to support different authentication and authorizations not only to Bane NOR but to the external webhooks.</p> <p>Some ideas of features that will be added around this are:</p> <ul> <li>OAuth2, JWTs, and JWKs for authentication and authorization towards the webhook endpoint</li> <li>API Keys that can be configured by the end users if needed to authenticate to their webhook endpoints</li> <li>One Time Verification, seen at other systems like Twitter and Microsoft OneDrive. Use during setup to confirm that the consumer controls the code endpoint</li> <li>Event signing so that consumer can verify that the event has not been tampered with after being sendt from event issuer and gives event integrity</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"apis/v1alpha/","title":"v1alpha","text":""},{"location":"user-guides/cloudevents/","title":"Cloudevents","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/cloudevents/#cloudevents","title":"Cloudevents","text":"<p>The cloudevents specification is used by Event Issuer both for subscribed events and produced events. The difference is how Event Issuer is using the Cloud Events for events beeing subscribed to and when producing.</p>"},{"location":"user-guides/cloudevents/#subscription","title":"Subscription","text":"<p>Subscribed events are reciving the cloud events by using the HTTP Protocol Binding. This means that the cloudevents are part of the HTTP headers.</p>"},{"location":"user-guides/cloudevents/#producers","title":"Producers","text":"<p>Producers needs to transmit the cloudevent metadata by using the JSON Event Format. The produce endpoints expects an content type of <code>application/cloudevents+json</code> as specified in section <code>3. Envelope</code> of the specification.</p>"},{"location":"user-guides/subscriptions/","title":"Subscriptions","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/subscriptions/#subscriptions","title":"Subscriptions","text":"<p>Subscriptions is the main mechanism for getting realtime events from the Bane NOR event backbone.</p>"},{"location":"user-guides/tenants/","title":"Tenants","text":"<p>Warning</p> <p>The following section is under construction</p>"},{"location":"user-guides/tenants/#tenants","title":"Tenants","text":"<p>Event Issuer has the concept of Tenants to give the different organizations control over their overall usage of the Event Issuer. This also gives Bane NOR to add certain control mechanisms to control the usage of the Event Issuer API dependant on different needs.</p>"},{"location":"user-guides/tenants/#alpha-version","title":"Alpha Version","text":"<p>As of the alpha version of Event Issuer tenants can not be created automatically by the consumer and producers. An request to .... needs to be sendt with the following information</p> Name Description <p>An solution of making this easier will be looked at over time when we are moving to an full release.</p>"},{"location":"user-guides/tracing/","title":"Tracing","text":"<p>Event Issuer is using the Open Telemetry and will deliver an tracing value for every outgoing event.</p> <p>The standardized way to transmit tracing values is by following the W3 standard by using:</p> <ul> <li><code>traceparent</code> describes the position of the incoming request in its trace graph in a portable, fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set <code>traceparent</code> even when it only relies on vendor-specific information in <code>tracestate</code></li> <li><code>tracestate</code> extends <code>traceparent</code> with vendor-specific data represented by a set of name/value pairs. Storing information in <code>tracestate</code> is optional.</li> </ul>"}]}